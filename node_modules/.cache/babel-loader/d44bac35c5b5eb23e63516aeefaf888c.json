{"ast":null,"code":"var _jsxFileName = \"/home/sinkiline/Programming/Test_Project_FrontEnd_React/test-project/src/components/FilterData/FilterData.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./FilterData.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass FilterData extends Component {\n  render() {\n    const allPosts = this.props.posts;\n    const isSortedTitle = this.props.isSortedTitle.index;\n    const isSortedDesc = this.props.isSortedDesc.index;\n    const isSortedId = this.props.isSortedId.index; // const sortId = () => {\n    //   let idPosts;\n    //\n    //   if (isSortedId === false) {\n    //     idPosts = allPosts.sort((a, b) => (a.id > b.id) ? 1 : -1);\n    //     this.props.onUpdateSortId(true);\n    //   } else {\n    //     idPosts = allPosts.sort((a, b) => (a.id < b.id) ? 1 : -1);\n    //     this.props.onUpdateSortId(false);\n    //   }\n    //\n    //   this.props.onDeletePosts();\n    //\n    //   idPosts.map(item => {\n    //     this.props.onUpdateAllPosts(item);\n    //   })\n    // }\n    //\n    // const sortTitle = () => {\n    //   let title;\n    //\n    //   if (isSortedTitle === false) {\n    //     title = allPosts.sort((a, b) => (a.title > b.title) ? 1 : -1);\n    //     this.props.onUpdateSortTitle(true);\n    //   } else {\n    //     title = allPosts.sort((a, b) => (a.title < b.title) ? 1 : -1);\n    //     this.props.onUpdateSortTitle(false);\n    //   }\n    //\n    //   this.props.onDeletePosts();\n    //\n    //   title.map(item => {\n    //     this.props.onUpdateAllPosts(item);\n    //   })\n    // }\n    //\n    // const sortDesc = () => {\n    //   let desc;\n    //\n    //   if (isSortedDesc === false) {\n    //     desc = allPosts.sort((a, b) => (a.body > b.body) ? 1 : -1);\n    //     this.props.onUpdateSortDesc(true);\n    //   } else {\n    //     desc = allPosts.sort((a, b) => (a.body < b.body) ? 1 : -1);\n    //     this.props.onUpdateSortDesc(false);\n    //   }\n    //\n    //   this.props.onDeletePosts();\n    //\n    //   desc.map(item => {\n    //     this.props.onUpdateAllPosts(item);\n    //   })\n    // }\n\n    const sortTable = props => {\n      const {\n        type\n      } = props;\n      console.log(type); // let sorting;\n      //\n      // console.log(type)\n      //\n      //\n      // switch (type) {\n      //   case 'id':\n      //     if (isSortedId === false) {\n      //       sorting = allPosts.sort((a, b) => (a.id > b.id) ? 1 : -1);\n      //       this.props.onUpdateSortId(true);\n      //     } else {\n      //       sorting = allPosts.sort((a, b) => (a.id < b.id) ? 1 : -1);\n      //       this.props.onUpdateSortId(false);\n      //     }\n      //     break;\n      //   case 'title':\n      //     if (isSortedTitle === false) {\n      //       sorting = allPosts.sort((a, b) => (a.title > b.title) ? 1 : -1);\n      //       this.props.onUpdateSortTitle(true);\n      //     } else {\n      //       sorting = allPosts.sort((a, b) => (a.title < b.title) ? 1 : -1);\n      //       this.props.onUpdateSortTitle(false);\n      //     }\n      //     break;\n      //   case 'desc':\n      //     if (isSortedDesc === false) {\n      //       sorting = allPosts.sort((a, b) => (a.body > b.body) ? 1 : -1);\n      //       this.props.onUpdateSortDesc(true);\n      //     } else {\n      //       sorting = allPosts.sort((a, b) => (a.body < b.body) ? 1 : -1);\n      //       this.props.onUpdateSortDesc(false);\n      //     }\n      //     break;\n      //\n      // }\n      //\n      // this.props.onDeletePosts();\n      //\n      // sorting.map(item => {\n      //   this.props.onUpdateAllPosts(item);\n      // })\n    };\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"id\",\n          className: \"custom-thead-btn\",\n          onClick: () => sortTable(\"id\"),\n          children: \"ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"title\",\n          className: \"custom-thead-btn\",\n          onClick: () => sortTable(\"title\"),\n          children: \"\\u0417\\u0430\\u0433\\u043E\\u043B\\u043E\\u0432\\u043E\\u043A\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"desc\",\n          className: \"custom-thead-btn\",\n          onClick: () => sortTable(\"desc\"),\n          children: \"\\u041E\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0435\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default connect(state => ({\n  posts: state.posts,\n  currentPageTable: state.currentPageTable,\n  isSortedTitle: state.isSortedTitle,\n  isSortedDesc: state.isSortedDesc,\n  isSortedId: state.isSortedId\n}), dispatch => ({\n  onAddCurrentPageTable: item => {\n    dispatch({\n      type: 'SAVE_CURRENT_PAGE',\n      data: item\n    });\n  },\n  onUpdateAllPosts: item => {\n    dispatch({\n      type: 'UPDATE_ALL_POSTS',\n      data: item\n    });\n  },\n  onDeletePosts: () => {\n    dispatch({\n      type: 'DELETE_ALL_POSTS'\n    });\n  },\n  onUpdateSortTitle: item => {\n    dispatch({\n      type: 'UPDATE_SORT_TITLE',\n      data: item\n    });\n  },\n  onUpdateSortDesc: item => {\n    dispatch({\n      type: 'UPDATE_SORT_DESC',\n      data: item\n    });\n  },\n  onUpdateSortId: item => {\n    dispatch({\n      type: 'UPDATE_SORT_ID',\n      data: item\n    });\n  }\n}))(FilterData);","map":{"version":3,"names":["React","Component","connect","FilterData","render","allPosts","props","posts","isSortedTitle","index","isSortedDesc","isSortedId","sortTable","type","console","log","state","currentPageTable","dispatch","onAddCurrentPageTable","item","data","onUpdateAllPosts","onDeletePosts","onUpdateSortTitle","onUpdateSortDesc","onUpdateSortId"],"sources":["/home/sinkiline/Programming/Test_Project_FrontEnd_React/test-project/src/components/FilterData/FilterData.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport {connect} from \"react-redux\";\nimport \"./FilterData.css\";\n\nclass FilterData extends Component {\n  render() {\n    const allPosts = this.props.posts;\n    const isSortedTitle = this.props.isSortedTitle.index;\n    const isSortedDesc = this.props.isSortedDesc.index;\n    const isSortedId = this.props.isSortedId.index;\n\n    // const sortId = () => {\n    //   let idPosts;\n    //\n    //   if (isSortedId === false) {\n    //     idPosts = allPosts.sort((a, b) => (a.id > b.id) ? 1 : -1);\n    //     this.props.onUpdateSortId(true);\n    //   } else {\n    //     idPosts = allPosts.sort((a, b) => (a.id < b.id) ? 1 : -1);\n    //     this.props.onUpdateSortId(false);\n    //   }\n    //\n    //   this.props.onDeletePosts();\n    //\n    //   idPosts.map(item => {\n    //     this.props.onUpdateAllPosts(item);\n    //   })\n    // }\n    //\n    // const sortTitle = () => {\n    //   let title;\n    //\n    //   if (isSortedTitle === false) {\n    //     title = allPosts.sort((a, b) => (a.title > b.title) ? 1 : -1);\n    //     this.props.onUpdateSortTitle(true);\n    //   } else {\n    //     title = allPosts.sort((a, b) => (a.title < b.title) ? 1 : -1);\n    //     this.props.onUpdateSortTitle(false);\n    //   }\n    //\n    //   this.props.onDeletePosts();\n    //\n    //   title.map(item => {\n    //     this.props.onUpdateAllPosts(item);\n    //   })\n    // }\n    //\n    // const sortDesc = () => {\n    //   let desc;\n    //\n    //   if (isSortedDesc === false) {\n    //     desc = allPosts.sort((a, b) => (a.body > b.body) ? 1 : -1);\n    //     this.props.onUpdateSortDesc(true);\n    //   } else {\n    //     desc = allPosts.sort((a, b) => (a.body < b.body) ? 1 : -1);\n    //     this.props.onUpdateSortDesc(false);\n    //   }\n    //\n    //   this.props.onDeletePosts();\n    //\n    //   desc.map(item => {\n    //     this.props.onUpdateAllPosts(item);\n    //   })\n    // }\n\n    const sortTable = (props) => {\n      const { type } = props;\n      console.log(type)\n      // let sorting;\n      //\n      // console.log(type)\n      //\n      //\n      // switch (type) {\n      //   case 'id':\n      //     if (isSortedId === false) {\n      //       sorting = allPosts.sort((a, b) => (a.id > b.id) ? 1 : -1);\n      //       this.props.onUpdateSortId(true);\n      //     } else {\n      //       sorting = allPosts.sort((a, b) => (a.id < b.id) ? 1 : -1);\n      //       this.props.onUpdateSortId(false);\n      //     }\n      //     break;\n      //   case 'title':\n      //     if (isSortedTitle === false) {\n      //       sorting = allPosts.sort((a, b) => (a.title > b.title) ? 1 : -1);\n      //       this.props.onUpdateSortTitle(true);\n      //     } else {\n      //       sorting = allPosts.sort((a, b) => (a.title < b.title) ? 1 : -1);\n      //       this.props.onUpdateSortTitle(false);\n      //     }\n      //     break;\n      //   case 'desc':\n      //     if (isSortedDesc === false) {\n      //       sorting = allPosts.sort((a, b) => (a.body > b.body) ? 1 : -1);\n      //       this.props.onUpdateSortDesc(true);\n      //     } else {\n      //       sorting = allPosts.sort((a, b) => (a.body < b.body) ? 1 : -1);\n      //       this.props.onUpdateSortDesc(false);\n      //     }\n      //     break;\n      //\n      // }\n      //\n      // this.props.onDeletePosts();\n      //\n      // sorting.map(item => {\n      //   this.props.onUpdateAllPosts(item);\n      // })\n    }\n\n\n    return(\n      <>\n        <th><button id={\"id\"} className={\"custom-thead-btn\"} onClick={() => sortTable(\"id\")}>ID</button></th>\n        <th><button id={\"title\"} className={\"custom-thead-btn\"} onClick={() => sortTable(\"title\")}>Заголовок</button></th>\n        <th><button id={\"desc\"} className={\"custom-thead-btn\"} onClick={() => sortTable(\"desc\")}>Описание</button></th>\n      </>\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    posts: state.posts,\n    currentPageTable: state.currentPageTable,\n    isSortedTitle: state.isSortedTitle,\n    isSortedDesc: state.isSortedDesc,\n    isSortedId: state.isSortedId,\n  }),\n  dispatch => ({\n    onAddCurrentPageTable: (item) => {\n      dispatch({type: 'SAVE_CURRENT_PAGE', data: item})\n    },\n    onUpdateAllPosts: (item) => {\n      dispatch({type: 'UPDATE_ALL_POSTS', data: item})\n    },\n    onDeletePosts: () => {\n      dispatch({type: 'DELETE_ALL_POSTS'})\n    },\n    onUpdateSortTitle: (item) => {\n      dispatch({type: 'UPDATE_SORT_TITLE', data: item})\n    },\n    onUpdateSortDesc: (item) => {\n      dispatch({type: 'UPDATE_SORT_DESC', data: item})\n    },\n    onUpdateSortId: (item) => {\n      dispatch({type: 'UPDATE_SORT_ID', data: item})\n    }\n  })\n)(FilterData);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}